; benchmark
(set-info :status unknown)
; (set-logic ABV)
(set-logic ABV)
(declare-fun input.src.llvm-%x () (Array (_ BitVec 32) Bool))
(declare-fun input.dst.llvm-%x () (Array (_ BitVec 32) Bool))
(declare-fun memlabel-mem-esp_end () (_ BitVec 32))
(declare-fun memlabel-mem-esp_begin () (_ BitVec 32))
(declare-fun input.dst.esp.L0%0%1 () (_ BitVec 32))
(declare-fun memlabel-mem-local.1.0_begin () (_ BitVec 32))
(declare-fun local.1 () (_ BitVec 32))
(declare-fun memlabel-mem-local.1.0_end () (_ BitVec 32))
(declare-fun stack.size () (_ BitVec 32))
(assert
 (let (($x107 (forall ((input.dst.llvm-%x_8 (_ BitVec 32)) )(let (($x105 (forall ((input.dst.llvm-%x_7 (_ BitVec 32)) )(let (($x103 (exists ((input.src.llvm-%x_3 (_ BitVec 32)) )(let (($x87 (exists ((input.dst.llvm-%x_4 (_ BitVec 32)) )(and (select (store ((as const (Array (_ BitVec 32) Bool)) false) (_ bv2 32) true) input.dst.llvm-%x_4) (= (bvmul input.src.llvm-%x_3 input.dst.llvm-%x_4) (bvadd input.dst.llvm-%x_7 input.dst.llvm-%x_8))))
 ))
 (let (($x74 (select input.src.llvm-%x input.src.llvm-%x_3)))
 (and $x74 $x87))))
 ))
 (let (($x77 (select input.dst.llvm-%x input.dst.llvm-%x_7)))
 (=> $x77 $x103))))
 ))
 (let (($x77 (select input.dst.llvm-%x input.dst.llvm-%x_8)))
 (=> $x77 $x105))))
 ))
 (let (($x85 (= $x107 true)))
 (let (($x63 (= true true)))
 (let (($x79 (forall ((input.dst.llvm-%x_4 (_ BitVec 32)) )(let (($x76 (exists ((input.src.llvm-%x_3 (_ BitVec 32)) )(let (($x74 (select input.src.llvm-%x input.src.llvm-%x_3)))
 (and $x74 (= input.src.llvm-%x_3 input.dst.llvm-%x_4))))
 ))
 (let (($x77 (select input.dst.llvm-%x input.dst.llvm-%x_4)))
 (=> $x77 $x76))))
 ))
 (let (($x64 (= $x79 true)))
 (let (($x67 (and $x64 $x63)))
 (let ((?x52 (bvadd memlabel-mem-esp_end (_ bv1 32))))
 (let ((?x53 (bvand ?x52 (_ bv4294963200 32))))
 (let (($x54 (= ?x53 ?x52)))
 (let ((?x49 (bvand memlabel-mem-esp_begin (_ bv4294963200 32))))
 (let (($x50 (= ?x49 memlabel-mem-esp_begin)))
 (let (($x55 (and $x50 $x54)))
 (let ((?x42 (bvadd input.dst.esp.L0%0%1 (_ bv7 32))))
 (let (($x44 (bvule ?x42 memlabel-mem-esp_end)))
 (let (($x43 (bvule input.dst.esp.L0%0%1 ?x42)))
 (let (($x45 (and $x43 $x44)))
 (let ((?x36 (bvadd memlabel-mem-esp_begin (_ bv1048576 32))))
 (let (($x39 (bvule ?x36 input.dst.esp.L0%0%1)))
 (let (($x37 (bvule memlabel-mem-esp_begin ?x36)))
 (let (($x40 (and $x37 $x39)))
 (let (($x46 (and $x40 $x45)))
 (let (($x33 (= local.1 memlabel-mem-local.1.0_begin)))
 (let ((?x30 (bvand local.1 (_ bv3 32))))
 (let (($x31 (= ?x30 (_ bv0 32))))
 (let (($x26 (bvule memlabel-mem-local.1.0_end memlabel-mem-esp_end)))
 (let (($x25 (bvuge memlabel-mem-local.1.0_begin memlabel-mem-esp_begin)))
 (let (($x27 (and $x25 $x26)))
 (let ((?x21 (bvadd memlabel-mem-local.1.0_begin (_ bv3 32))))
 (let (($x22 (= memlabel-mem-local.1.0_end ?x21)))
 (let (($x18 (bvule memlabel-mem-local.1.0_begin memlabel-mem-local.1.0_end)))
 (let (($x7 (bvugt stack.size (_ bv0 32))))
 (let ((?x10 (bvadd stack.size (_ bv4294967295 32))))
 (let ((?x12 (bvadd memlabel-mem-esp_begin ?x10)))
 (let (($x9 (= memlabel-mem-esp_end ?x12)))
 (let (($x14 (bvule memlabel-mem-esp_begin memlabel-mem-esp_end)))
 (let (($x13 (and $x14 $x9)))
 (let (($x15 (and $x13 $x7)))
 (let (($x19 (and $x15 $x18)))
 (let (($x23 (and $x19 $x22)))
 (let (($x24 (and $x23 true)))
 (let (($x28 (and $x24 $x27)))
 (let (($x32 (and $x28 $x31)))
 (let (($x34 (and $x32 $x33)))
 (let (($x47 (and $x34 $x46)))
 (let (($x56 (and $x47 $x55)))
 (let (($x80 (and $x56 $x67)))
 (let (($x90 (=> $x80 $x85)))
 (let (($x91 (=> (and true $x80) $x85)))
 (not $x91))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
