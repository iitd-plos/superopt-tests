=SpecFuncIOSpecs
=FunctionName: sum_tree
=EntryPreconds
=pred 0
=Comment
pointer-implements-inductive-tree
=LhsExpr
1 : $spec-arg-0 : IND[Tree, SUM[UNIT, PROD[BV:32, DECL[Tree], DECL[Tree]]]]
2 : $llvm-arg-0 : BV:32
3 : $llvm-md : ARRAY[BV:32 -> BV:8]
4 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-top : MEMLABEL
6 : 4 : INT
7 : 0 : BOOL
8 : 0 : BV:32
9 : 1 : BV:32
10 : Lambda0 : BV:32
11 : eq(10, 8) : BOOL
12 : ite(11, 8, 9) : BV:32
13 : unit : UNIT
14 : Indxform0 : BV:32
15 : Indxform1 : BV:32
16 : select(3, 4, 5, 10, 6, 7) : BV:32
17 : prod(16, 14, 15) : PROD[BV:32, BV:32, BV:32]
18 : sum(12, 13, 17) : SUM[UNIT, PROD[BV:32, BV:32, BV:32]]
19 : lambda(10, 18) : FUNCTION[BV:32 -> SUM[UNIT, PROD[BV:32, BV:32, BV:32]]]
20 : Lambda1 : BV:32
21 : 4 : BV:32
22 : bvadd(20, 21) : BV:32
23 : select(3, 4, 5, 22, 6, 7) : BV:32
24 : lambda(20, 23) : FUNCTION[BV:32 -> BV:32]
25 : Lambda2 : BV:32
26 : 8 : BV:32
27 : bvadd(25, 26) : BV:32
28 : select(3, 4, 5, 27, 6, 7) : BV:32
29 : lambda(25, 28) : FUNCTION[BV:32 -> BV:32]
98 : 1 : INT
99 : 2 : INT
30 : ind(98, 99, 2, 14, 24, 15, 29, 19) : IND[Tree, SUM[UNIT, PROD[BV:32, DECL[Tree], DECL[Tree]]]]
31 : eq(1, 30) : BOOL
=RhsExpr
1 : 1 : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
