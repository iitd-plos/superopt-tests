=pred 0
=Comment
matfreq_1cmarr-matfreq_4cmarr
=LhsExpr
1 : input.spec-%var-mat-0.L4%5%bbentry : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : input.dst.llvm-%m : BV:32
10 : bvuge(5, 9) : BOOL
11 : ite(10, 3, 6) : BV:32
12 : unit : UNIT
13 : Indxform0 : BV:32
14 : Lambda0 : BV:32
15 : bvadd(6, 14) : BV:32
16 : lambda(14, 15) : FUNCTION[BV:32 -> BV:32]
17 : input.dst.llvm-%n : BV:32
18 : bvuge(14, 17) : BOOL
19 : ite(18, 3, 6) : BV:32
20 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
21 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
22 : memlabel-top : MEMLABEL
23 : input.dst.llvm-%mat : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(14, 9) : BV:32
26 : bvadd(5, 25) : BV:32
27 : bvmul(24, 26) : BV:32
28 : bvadd(23, 27) : BV:32
29 : 4 { 0x4 +1.0e1025 } : INT
30 : 0 { 0x0 } : BOOL
31 : select(20, 21, 22, 28, 29, 30) : BV:32
32 : prod(31, 13) : PROD[BV:32,BV:32]
33 : sum(19, 12, 32) : SUM[UNIT,PROD[BV:32,BV:32]]
34 : lambda(14, 33) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
35 : ind(2, 2, 3, 13, 16, 34) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
36 : prod(35, 4) : PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]
37 : sum(11, 12, 36) : SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]
38 : lambda(5, 37) : FUNCTION[BV:32 -> SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]]
50 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
39 : ind(2, 2, 50, 4, 8, 38) : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
40 : eq(1, 39) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 1
=Comment
matfreq_1cmarr-matfreq_4cmarr
=LhsExpr
1 : input.spec-%var-vec-0.L4%16%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : input.dst.llvm-%m : BV:32
10 : bvuge(5, 9) : BOOL
11 : ite(10, 3, 6) : BV:32
12 : unit : UNIT
13 : Indxform0 : BV:32
14 : Lambda0 : BV:32
15 : bvadd(6, 14) : BV:32
16 : lambda(14, 15) : FUNCTION[BV:32 -> BV:32]
17 : input.dst.llvm-%n : BV:32
18 : bvuge(14, 17) : BOOL
19 : ite(18, 3, 6) : BV:32
20 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
21 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
22 : memlabel-top : MEMLABEL
23 : input.dst.llvm-%mat : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(14, 9) : BV:32
26 : bvadd(5, 25) : BV:32
27 : bvmul(24, 26) : BV:32
28 : bvadd(23, 27) : BV:32
29 : 4 { 0x4 +1.0e1025 } : INT
30 : 0 { 0x0 } : BOOL
31 : select(20, 21, 22, 28, 29, 30) : BV:32
32 : prod(31, 13) : PROD[BV:32,BV:32]
33 : sum(19, 12, 32) : SUM[UNIT,PROD[BV:32,BV:32]]
34 : lambda(14, 33) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
51 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
35 : ind(2, 2, 51, 13, 16, 34) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
36 : prod(35, 4) : PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]
37 : sum(11, 12, 36) : SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]
38 : lambda(5, 37) : FUNCTION[BV:32 -> SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]]
50 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
39 : ind(2, 2, 50, 4, 8, 38) : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
60 : 0 : INT
61 : sum_get(39, 2) : IND[Type1,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],SUM[UNIT,DECL[Type1]]]]
62 : prod_get(61, 60) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
40 : eq(1, 62) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 2
=Comment
matfreq_1cmarr-matfreq_4cmarr
=LhsExpr
1 : input.spec-%var-mat2-0.L4%16%bbentry : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : input.dst.llvm-%m : BV:32
10 : bvuge(5, 9) : BOOL
11 : ite(10, 3, 6) : BV:32
12 : unit : UNIT
13 : Indxform0 : BV:32
14 : Lambda0 : BV:32
15 : bvadd(6, 14) : BV:32
16 : lambda(14, 15) : FUNCTION[BV:32 -> BV:32]
17 : input.dst.llvm-%n : BV:32
18 : bvuge(14, 17) : BOOL
19 : ite(18, 3, 6) : BV:32
20 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
21 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
22 : memlabel-top : MEMLABEL
23 : input.dst.llvm-%mat : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(14, 9) : BV:32
26 : bvadd(5, 25) : BV:32
27 : bvmul(24, 26) : BV:32
28 : bvadd(23, 27) : BV:32
29 : 4 { 0x4 +1.0e1025 } : INT
30 : 0 { 0x0 } : BOOL
31 : select(20, 21, 22, 28, 29, 30) : BV:32
32 : prod(31, 13) : PROD[BV:32,BV:32]
33 : sum(19, 12, 32) : SUM[UNIT,PROD[BV:32,BV:32]]
34 : lambda(14, 33) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
35 : ind(2, 2, 3, 13, 16, 34) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
36 : prod(35, 4) : PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]
37 : sum(11, 12, 36) : SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]
38 : lambda(5, 37) : FUNCTION[BV:32 -> SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]]
50 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
51 : apply(8, 50) : BV:32
39 : ind(2, 2, 51, 4, 8, 38) : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
40 : eq(1, 39) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 0
=Comment
matfreq_1rmarr-matfreq_4rmarr
=LhsExpr
1 : input.spec-%var-mat-0.L4%5%bbentry : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : input.dst.llvm-%m : BV:32
10 : bvuge(5, 9) : BOOL
11 : ite(10, 3, 6) : BV:32
12 : unit : UNIT
13 : Indxform0 : BV:32
14 : Lambda0 : BV:32
15 : bvadd(6, 14) : BV:32
16 : lambda(14, 15) : FUNCTION[BV:32 -> BV:32]
17 : input.dst.llvm-%n : BV:32
18 : bvuge(14, 17) : BOOL
19 : ite(18, 3, 6) : BV:32
20 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
21 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
22 : memlabel-top : MEMLABEL
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : input.dst.llvm-%mat : BV:32
25 : bvmul(5, 17) : BV:32
26 : bvadd(14, 25) : BV:32
27 : bvmul(23, 26) : BV:32
50 : bvadd(24, 27) : BV:32
28 : 4 { 0x4 +1.0e1025 } : INT
29 : 0 { 0x0 } : BOOL
30 : select(20, 21, 22, 50, 28, 29) : BV:32
31 : prod(30, 13) : PROD[BV:32,BV:32]
32 : sum(19, 12, 31) : SUM[UNIT,PROD[BV:32,BV:32]]
33 : lambda(14, 32) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
34 : ind(2, 2, 3, 13, 16, 33) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
35 : prod(34, 4) : PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]
36 : sum(11, 12, 35) : SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]
37 : lambda(5, 36) : FUNCTION[BV:32 -> SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]]
40 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
38 : ind(2, 2, 40, 4, 8, 37) : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
39 : eq(1, 38) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 1
=Comment
matfreq_1rmarr-matfreq_4rmarr
=LhsExpr
1 : input.spec-%var-vec-0.L4%16%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : input.dst.llvm-%m : BV:32
10 : bvuge(5, 9) : BOOL
11 : ite(10, 3, 6) : BV:32
12 : unit : UNIT
13 : Indxform0 : BV:32
14 : Lambda0 : BV:32
15 : bvadd(6, 14) : BV:32
16 : lambda(14, 15) : FUNCTION[BV:32 -> BV:32]
17 : input.dst.llvm-%n : BV:32
18 : bvuge(14, 17) : BOOL
19 : ite(18, 3, 6) : BV:32
20 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
21 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
22 : memlabel-top : MEMLABEL
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : input.dst.llvm-%mat : BV:32
25 : bvmul(5, 17) : BV:32
26 : bvadd(14, 25) : BV:32
27 : bvmul(23, 26) : BV:32
60 : bvadd(24, 27) : BV:32
28 : 4 { 0x4 +1.0e1025 } : INT
29 : 0 { 0x0 } : BOOL
30 : select(20, 21, 22, 60, 28, 29) : BV:32
31 : prod(30, 13) : PROD[BV:32,BV:32]
32 : sum(19, 12, 31) : SUM[UNIT,PROD[BV:32,BV:32]]
33 : lambda(14, 32) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
34 : ind(2, 2, 41, 13, 16, 33) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
35 : prod(34, 4) : PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]
36 : sum(11, 12, 35) : SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]
37 : lambda(5, 36) : FUNCTION[BV:32 -> SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]]
40 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
38 : ind(2, 2, 40, 4, 8, 37) : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
50 : 0 : INT
51 : sum_get(38, 2) : IND[Type1,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],SUM[UNIT,DECL[Type1]]]]
52 : prod_get(51, 50) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
39 : eq(1, 52) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 2
=Comment
matfreq_1rmarr-matfreq_4rmarr
=LhsExpr
1 : input.spec-%var-mat2-0.L4%16%bbentry : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : input.dst.llvm-%m : BV:32
10 : bvuge(5, 9) : BOOL
11 : ite(10, 3, 6) : BV:32
12 : unit : UNIT
13 : Indxform0 : BV:32
14 : Lambda0 : BV:32
15 : bvadd(6, 14) : BV:32
16 : lambda(14, 15) : FUNCTION[BV:32 -> BV:32]
17 : input.dst.llvm-%n : BV:32
18 : bvuge(14, 17) : BOOL
19 : ite(18, 3, 6) : BV:32
20 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
21 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
22 : memlabel-top : MEMLABEL
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : input.dst.llvm-%mat : BV:32
25 : bvmul(5, 17) : BV:32
26 : bvadd(14, 25) : BV:32
27 : bvmul(23, 26) : BV:32
50 : bvadd(24, 27) : BV:32
28 : 4 { 0x4 +1.0e1025 } : INT
29 : 0 { 0x0 } : BOOL
30 : select(20, 21, 22, 50, 28, 29) : BV:32
31 : prod(30, 13) : PROD[BV:32,BV:32]
32 : sum(19, 12, 31) : SUM[UNIT,PROD[BV:32,BV:32]]
33 : lambda(14, 32) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
34 : ind(2, 2, 3, 13, 16, 33) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
35 : prod(34, 4) : PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]
36 : sum(11, 12, 35) : SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]
37 : lambda(5, 36) : FUNCTION[BV:32 -> SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]]
90 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
51 : apply(8, 90) : BV:32
38 : ind(2, 2, 51, 4, 8, 37) : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
39 : eq(1, 38) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 0
=Comment
matfreq_1arr_1arr-matfreq_1arr_4arr
=LhsExpr
1 : input.spec-%var-mat-0.L4%5%bbentry : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : input.dst.llvm-%m : BV:32
10 : bvuge(5, 9) : BOOL
11 : ite(10, 3, 6) : BV:32
12 : unit : UNIT
13 : Indxform0 : BV:32
14 : Lambda0 : BV:32
15 : bvadd(6, 14) : BV:32
16 : lambda(14, 15) : FUNCTION[BV:32 -> BV:32]
17 : input.dst.llvm-%n : BV:32
18 : bvuge(14, 17) : BOOL
19 : ite(18, 3, 6) : BV:32
20 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
21 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
22 : memlabel-top : MEMLABEL
23 : input.dst.llvm-%mat : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(5, 24) : BV:32
26 : bvadd(23, 25) : BV:32
27 : 4 { 0x4 +1.0e1025 } : INT
28 : 0 { 0x0 } : BOOL
29 : select(20, 21, 22, 26, 27, 28) : BV:32
30 : bvmul(14, 24) : BV:32
31 : bvadd(29, 30) : BV:32
32 : select(20, 21, 22, 31, 27, 28) : BV:32
33 : prod(32, 13) : PROD[BV:32,BV:32]
34 : sum(19, 12, 33) : SUM[UNIT,PROD[BV:32,BV:32]]
35 : lambda(14, 34) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
36 : ind(2, 2, 3, 13, 16, 35) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
37 : prod(36, 4) : PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]
38 : sum(11, 12, 37) : SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]
39 : lambda(5, 38) : FUNCTION[BV:32 -> SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]]
42 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
40 : ind(2, 2, 42, 4, 8, 39) : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
41 : eq(1, 40) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 1
=Comment
matfreq_1arr_1arr-matfreq_1arr_4arr
=LhsExpr
1 : input.spec-%var-vec-0.L4%16%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : input.dst.llvm-%m : BV:32
10 : bvuge(5, 9) : BOOL
11 : ite(10, 3, 6) : BV:32
12 : unit : UNIT
13 : Indxform0 : BV:32
14 : Lambda0 : BV:32
15 : bvadd(6, 14) : BV:32
16 : lambda(14, 15) : FUNCTION[BV:32 -> BV:32]
17 : input.dst.llvm-%n : BV:32
18 : bvuge(14, 17) : BOOL
19 : ite(18, 3, 6) : BV:32
20 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
21 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
22 : memlabel-top : MEMLABEL
23 : input.dst.llvm-%mat : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(5, 24) : BV:32
26 : bvadd(23, 25) : BV:32
27 : 4 { 0x4 +1.0e1025 } : INT
28 : 0 { 0x0 } : BOOL
29 : select(20, 21, 22, 26, 27, 28) : BV:32
30 : bvmul(14, 24) : BV:32
31 : bvadd(29, 30) : BV:32
32 : select(20, 21, 22, 31, 27, 28) : BV:32
33 : prod(32, 13) : PROD[BV:32,BV:32]
34 : sum(19, 12, 33) : SUM[UNIT,PROD[BV:32,BV:32]]
35 : lambda(14, 34) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
43 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
36 : ind(2, 2, 43, 13, 16, 35) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
37 : prod(36, 4) : PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]
38 : sum(11, 12, 37) : SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]
39 : lambda(5, 38) : FUNCTION[BV:32 -> SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]]
42 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
40 : ind(2, 2, 42, 4, 8, 39) : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
50 : 0 : INT
51 : sum_get(40, 2) : IND[Type1,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],SUM[UNIT,DECL[Type1]]]]
52 : prod_get(51, 50) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
41 : eq(1, 52) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 2
=Comment
matfreq_1arr_1arr-matfreq_1arr_4arr
=LhsExpr
1 : input.spec-%var-mat2-0.L4%16%bbentry : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : input.dst.llvm-%m : BV:32
10 : bvuge(5, 9) : BOOL
11 : ite(10, 3, 6) : BV:32
12 : unit : UNIT
13 : Indxform0 : BV:32
14 : Lambda0 : BV:32
15 : bvadd(6, 14) : BV:32
16 : lambda(14, 15) : FUNCTION[BV:32 -> BV:32]
17 : input.dst.llvm-%n : BV:32
18 : bvuge(14, 17) : BOOL
19 : ite(18, 3, 6) : BV:32
20 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
21 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
22 : memlabel-top : MEMLABEL
23 : input.dst.llvm-%mat : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(5, 24) : BV:32
26 : bvadd(23, 25) : BV:32
27 : 4 { 0x4 +1.0e1025 } : INT
28 : 0 { 0x0 } : BOOL
29 : select(20, 21, 22, 26, 27, 28) : BV:32
30 : bvmul(14, 24) : BV:32
31 : bvadd(29, 30) : BV:32
32 : select(20, 21, 22, 31, 27, 28) : BV:32
33 : prod(32, 13) : PROD[BV:32,BV:32]
34 : sum(19, 12, 33) : SUM[UNIT,PROD[BV:32,BV:32]]
35 : lambda(14, 34) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
36 : ind(2, 2, 3, 13, 16, 35) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
37 : prod(36, 4) : PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]
38 : sum(11, 12, 37) : SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]
39 : lambda(5, 38) : FUNCTION[BV:32 -> SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]]
50 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
51 : apply(8, 50) : BV:32
40 : ind(2, 2, 51, 4, 8, 39) : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
41 : eq(1, 40) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 0
=Comment
strcspn_dietlibc-strcspn_1ls_1arr
=LhsExpr
1 : input.spec-%var-reject-0.L4%31%bbentry : IND[Type0,SUM[UNIT,UNIT,PROD[BV:8,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%reject : BV:32
100 : input.dst.llvm-%i.0.Lfor.cond1%1%bbentry : BV:32
101 : bvadd(3, 100) : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda0 : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(10, 9) : BOOL
12 : 0 { 0x0 } : BV:8
13 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
14 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
15 : memlabel-top : MEMLABEL
16 : 0 { 0x0 } : BOOL
17 : select(13, 14, 15, 9, 2, 16) : BV:8
18 : eq(12, 17) : BOOL
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : ite(18, 6, 19) : BV:32
21 : ite(11, 10, 20) : BV:32
22 : unit : UNIT
23 : prod(17, 4) : PROD[BV:8,BV:32]
24 : sum(21, 22, 22, 23) : SUM[UNIT,UNIT,PROD[BV:8,BV:32]]
25 : lambda(9, 24) : FUNCTION[BV:32 -> SUM[UNIT,UNIT,PROD[BV:8,BV:32]]]
26 : ind(2, 2, 101, 4, 8, 25) : IND[Type0,SUM[UNIT,UNIT,PROD[BV:8,DECL[Type0]]]]
27 : eq(1, 26) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done
=pred 2
=Comment
strpbrk_dietlibc-strpbrk_1ls_1arr
=LhsExpr
1 : input.spec-%var-accept-0.L4%29%bbentry : IND[Type0,SUM[UNIT,UNIT,PROD[BV:8,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%accept : BV:32
100 : input.dst.llvm-%i.0.Lfor.cond1%1%bbentry : BV:32
101 : bvadd(3, 100) : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda0 : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(10, 9) : BOOL
12 : 0 { 0x0 } : BV:8
13 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
14 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
15 : memlabel-top : MEMLABEL
16 : 0 { 0x0 } : BOOL
17 : select(13, 14, 15, 9, 2, 16) : BV:8
18 : eq(12, 17) : BOOL
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : ite(18, 6, 19) : BV:32
21 : ite(11, 10, 20) : BV:32
22 : unit : UNIT
23 : prod(17, 4) : PROD[BV:8,BV:32]
24 : sum(21, 22, 22, 23) : SUM[UNIT,UNIT,PROD[BV:8,BV:32]]
25 : lambda(9, 24) : FUNCTION[BV:32 -> SUM[UNIT,UNIT,PROD[BV:8,BV:32]]]
26 : ind(2, 2, 101, 4, 8, 25) : IND[Type0,SUM[UNIT,UNIT,PROD[BV:8,DECL[Type0]]]]
27 : eq(1, 26) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done
=pred 6
=Comment
strspn_dietlibc-strspn_1arr_4arr-strspn_1arr_1ls-strspn_1arr_4ls-strspn_1arr_4cls-strspn_1ls_1arr-strspn_1ls_4arr-strspn_1ls_1ls-strspn_1ls_4ls-strspn_1ls_4cls
=LhsExpr
140476 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140477 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140854 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
141394 : input.dst.llvm-%s.addr.0.Lfor.cond%1%bbentry : BV:32
140280 : 1 { 0x1 +1.0e1025 } : INT
140319 : 0 { 0x0 } : BOOL
141701 : select(140476, 140477, 140854, 141394, 140280, 140319) : BV:8
141021 : input.spec-%var-c-0.L4%30%bbentry : BV:8
1 : eq(141701, 141021) : BV:8
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done
=pred 6
=Comment
strcspn_dietlibc-strcspn_1arr_4arr-strcspn_1arr_1ls-strcspn_1arr_4ls-strcspn_1arr_4cls-strcspn_1ls_1arr-strcspn_1ls_4arr-strcspn_1ls_1ls-strcspn_1ls_4ls-strcspn_1ls_4cls
=LhsExpr
140476 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140477 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140854 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
141394 : input.dst.llvm-%s.addr.0.Lfor.cond%1%bbentry : BV:32
140280 : 1 { 0x1 +1.0e1025 } : INT
140319 : 0 { 0x0 } : BOOL
141701 : select(140476, 140477, 140854, 141394, 140280, 140319) : BV:8
141021 : input.spec-%var-c-0.L4%30%bbentry : BV:8
1 : eq(141701, 141021) : BV:8
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done
=pred 7
=Comment
strpbrk_dietlibc-strpbrk_1arr_4arr-strpbrk_1arr_1ls-strpbrk_1arr_4ls-strpbrk_1arr_4cls-strpbrk_1ls_1arr-strpbrk_1ls_4arr-strpbrk_1ls_1ls-strpbrk_1ls_4ls-strpbrk_1ls_4cls
=LhsExpr
140476 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140477 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140854 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
141394 : input.dst.llvm-%s.addr.0.Lfor.cond%1%bbentry : BV:32
140280 : 1 { 0x1 +1.0e1025 } : INT
140319 : 0 { 0x0 } : BOOL
141701 : select(140476, 140477, 140854, 141394, 140280, 140319) : BV:8
141021 : input.spec-%var-c-0.L4%29%bbentry : BV:8
1 : eq(141701, 141021) : BV:8
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done
=pred 8
=Comment
vecdot_1arr-vecdot_4arr
=LhsExpr
140273 : input.spec-%var-x-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
140280 : 1 { 0x1 +1.0e1025 } : INT
140277 : 0 { 0x0 +1.0e129 } : BV:32
140628 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140381 : Indxform0 : BV:32
140373 : Lambda0 : BV:32
140309 : 1 { 0x1 +1.11e129 } : BV:32
140952 : bvadd(140309, 140373) : BV:32
140953 : lambda(140373, 140952) : FUNCTION[BV:32 -> BV:32]
140417 : input.dst.llvm-%n : BV:32
140918 : bvuge(140373, 140417) : BOOL
140919 : ite(140918, 140277, 140309) : BV:32
140377 : unit : UNIT
140418 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140419 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140370 : memlabel-top : MEMLABEL
140415 : input.dst.llvm-%x : BV:32
140374 : 4 { 0x4 +1.47e129 } : BV:32
140957 : bvmul(140373, 140374) : BV:32
141002 : bvadd(140415, 140957) : BV:32
140371 : 4 { 0x4 +1.0e1025 } : INT
140372 : 0 { 0x0 } : BOOL
141003 : select(140418, 140419, 140370, 141002, 140371, 140372) : BV:32
141005 : prod(141003, 140381) : PROD[BV:32,BV:32]
141007 : sum(140919, 140377, 141005) : SUM[UNIT,PROD[BV:32,BV:32]]
141009 : lambda(140373, 141007) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
141016 : ind(140280, 140280, 140628, 140381, 140953, 141009) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
141019 : eq(140273, 141016) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done
=pred 9
=Comment
vecdot_1arr-vecdot_4arr
=LhsExpr
140274 : input.spec-%var-y-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
140280 : 1 { 0x1 +1.0e1025 } : INT
140277 : 0 { 0x0 +1.0e129 } : BV:32
140628 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140381 : Indxform0 : BV:32
140373 : Lambda0 : BV:32
140309 : 1 { 0x1 +1.11e129 } : BV:32
140952 : bvadd(140309, 140373) : BV:32
140953 : lambda(140373, 140952) : FUNCTION[BV:32 -> BV:32]
140417 : input.dst.llvm-%n : BV:32
140918 : bvuge(140373, 140417) : BOOL
140919 : ite(140918, 140277, 140309) : BV:32
140377 : unit : UNIT
140418 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140419 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140370 : memlabel-top : MEMLABEL
140416 : input.dst.llvm-%y : BV:32
140374 : 4 { 0x4 +1.47e129 } : BV:32
140957 : bvmul(140373, 140374) : BV:32
140959 : bvadd(140416, 140957) : BV:32
140371 : 4 { 0x4 +1.0e1025 } : INT
140372 : 0 { 0x0 } : BOOL
140960 : select(140418, 140419, 140370, 140959, 140371, 140372) : BV:32
140962 : prod(140960, 140381) : PROD[BV:32,BV:32]
140964 : sum(140919, 140377, 140962) : SUM[UNIT,PROD[BV:32,BV:32]]
140966 : lambda(140373, 140964) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
140975 : ind(140280, 140280, 140628, 140381, 140953, 140966) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
140979 : eq(140274, 140975) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done
=pred 10
=Comment
strcspn_1arr_4arr-strcspn_1ls_4arr
=LhsExpr
1 : spec-%var-reject-0.L4%31%bbentry : IND[Type0,SUM[UNIT,UNIT,PROD[BV:8,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%reject : BV:32
100 : input.dst.llvm-%i.0.Lwhile.cond%1%bbentry : BV:32
101 : bvadd(3, 100) : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda0 : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(10, 9) : BOOL
12 : 0 { 0x0 } : BV:8
13 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
14 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
15 : memlabel-top : MEMLABEL
16 : 0 { 0x0 } : BOOL
17 : select(13, 14, 15, 9, 2, 16) : BV:8
18 : eq(12, 17) : BOOL
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : ite(18, 6, 19) : BV:32
21 : ite(11, 10, 20) : BV:32
22 : unit : UNIT
23 : prod(17, 4) : PROD[BV:8,BV:32]
24 : sum(21, 22, 22, 23) : SUM[UNIT,UNIT,PROD[BV:8,BV:32]]
25 : lambda(9, 24) : FUNCTION[BV:32 -> SUM[UNIT,UNIT,PROD[BV:8,BV:32]]]
26 : ind(2, 2, 101, 4, 8, 25) : IND[Type0,SUM[UNIT,UNIT,PROD[BV:8,DECL[Type0]]]]
27 : eq(1, 26) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done
=pred 11
=Comment
strpbrk_1arr_4arr-strpbrk_1ls_4arr
=LhsExpr
1 : input.spec-%var-accept-0.L4%29%bbentry : IND[Type0,SUM[UNIT,UNIT,PROD[BV:8,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%accept : BV:32
100 : input.dst.llvm-%i.0.Lwhile.cond%1%bbentry : BV:32
101 : bvadd(3, 100) : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda0 : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(10, 9) : BOOL
12 : 0 { 0x0 } : BV:8
13 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
14 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
15 : memlabel-top : MEMLABEL
16 : 0 { 0x0 } : BOOL
17 : select(13, 14, 15, 9, 2, 16) : BV:8
18 : eq(12, 17) : BOOL
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : ite(18, 6, 19) : BV:32
21 : ite(11, 10, 20) : BV:32
22 : unit : UNIT
23 : prod(17, 4) : PROD[BV:8,BV:32]
24 : sum(21, 22, 22, 23) : SUM[UNIT,UNIT,PROD[BV:8,BV:32]]
25 : lambda(9, 24) : FUNCTION[BV:32 -> SUM[UNIT,UNIT,PROD[BV:8,BV:32]]]
26 : ind(2, 2, 101, 4, 8, 25) : IND[Type0,SUM[UNIT,UNIT,PROD[BV:8,DECL[Type0]]]]
27 : eq(1, 26) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done
=pred 0
=Comment
matfreq_1ls_1arr-matfreq_1ls_4arr
=LhsExpr
1 : input.spec-%var-mat-0.L4%5%bbentry : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%mat.addr.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform1 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 5) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : Indxform0 : BV:32
21 : Lambda0 : BV:32
22 : bvadd(17, 21) : BV:32
23 : lambda(21, 22) : FUNCTION[BV:32 -> BV:32]
24 : input.dst.llvm-%n : BV:32
25 : bvuge(21, 24) : BOOL
26 : ite(25, 15, 17) : BV:32
27 : select(6, 7, 8, 5, 11, 12) : BV:32
28 : bvmul(21, 9) : BV:32
29 : bvadd(27, 28) : BV:32
30 : select(6, 7, 8, 29, 11, 12) : BV:32
31 : prod(30, 20) : PROD[BV:32,BV:32]
32 : sum(26, 19, 31) : SUM[UNIT,PROD[BV:32,BV:32]]
33 : lambda(21, 32) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
34 : ind(2, 2, 15, 20, 23, 33) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
35 : prod(34, 4) : PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]
36 : sum(18, 19, 35) : SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]
37 : lambda(5, 36) : FUNCTION[BV:32 -> SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]]
38 : ind(2, 2, 3, 4, 14, 37) : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
39 : eq(1, 38) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 0
=Comment
matfreq_1ls_1arr-matfreq_1ls_4arr
=LhsExpr
1 : input.spec-%var-vec-0.L4%16%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%mat.addr.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform1 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 5) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : Indxform0 : BV:32
21 : Lambda0 : BV:32
22 : bvadd(17, 21) : BV:32
23 : lambda(21, 22) : FUNCTION[BV:32 -> BV:32]
24 : input.dst.llvm-%n : BV:32
25 : bvuge(21, 24) : BOOL
26 : ite(25, 15, 17) : BV:32
27 : select(6, 7, 8, 5, 11, 12) : BV:32
28 : bvmul(21, 9) : BV:32
29 : bvadd(27, 28) : BV:32
30 : select(6, 7, 8, 29, 11, 12) : BV:32
31 : prod(30, 20) : PROD[BV:32,BV:32]
32 : sum(26, 19, 31) : SUM[UNIT,PROD[BV:32,BV:32]]
33 : lambda(21, 32) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
51 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
34 : ind(2, 2, 51, 20, 23, 33) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
35 : prod(34, 4) : PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]
36 : sum(18, 19, 35) : SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]
37 : lambda(5, 36) : FUNCTION[BV:32 -> SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]]
38 : ind(2, 2, 3, 4, 14, 37) : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
60 : 0 : INT
61 : sum_get(38, 2) : IND[Type1,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],SUM[UNIT,DECL[Type1]]]]
62 : prod_get(61, 60) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
39 : eq(1, 62) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 0
=Comment
matfreq_1ls_1arr-matfreq_1ls_4arr
=LhsExpr
1 : input.spec-%var-mat2-0.L4%16%bbentry : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%mat.addr.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform1 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 5) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : Indxform0 : BV:32
21 : Lambda0 : BV:32
22 : bvadd(17, 21) : BV:32
23 : lambda(21, 22) : FUNCTION[BV:32 -> BV:32]
24 : input.dst.llvm-%n : BV:32
25 : bvuge(21, 24) : BOOL
26 : ite(25, 15, 17) : BV:32
27 : select(6, 7, 8, 5, 11, 12) : BV:32
28 : bvmul(21, 9) : BV:32
29 : bvadd(27, 28) : BV:32
30 : select(6, 7, 8, 29, 11, 12) : BV:32
31 : prod(30, 20) : PROD[BV:32,BV:32]
32 : sum(26, 19, 31) : SUM[UNIT,PROD[BV:32,BV:32]]
33 : lambda(21, 32) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
34 : ind(2, 2, 15, 20, 23, 33) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
35 : prod(34, 4) : PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]
36 : sum(18, 19, 35) : SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]
37 : lambda(5, 36) : FUNCTION[BV:32 -> SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]]
50 : apply(14, 3) : BV:32
38 : ind(2, 2, 50, 4, 14, 37) : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
39 : eq(1, 38) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 0
=Comment
matfreq_1arr_1ls-matfreq_1arr_4ls
=LhsExpr
1 : input.spec-%var-mat-0.L4%5%bbentry : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : input.dst.llvm-%m : BV:32
10 : bvuge(5, 9) : BOOL
11 : ite(10, 3, 6) : BV:32
12 : unit : UNIT
13 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
14 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
15 : memlabel-top : MEMLABEL
16 : input.dst.llvm-%mat : BV:32
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(5, 17) : BV:32
19 : bvadd(16, 18) : BV:32
20 : 4 { 0x4 +1.0e1025 } : INT
21 : 0 { 0x0 } : BOOL
22 : select(13, 14, 15, 19, 20, 21) : BV:32
23 : Indxform0 : BV:32
24 : Lambda0 : BV:32
25 : bvadd(24, 17) : BV:32
26 : select(13, 14, 15, 25, 20, 21) : BV:32
27 : lambda(24, 26) : FUNCTION[BV:32 -> BV:32]
28 : eq(3, 24) : BOOL
29 : ite(28, 3, 6) : BV:32
30 : select(13, 14, 15, 24, 20, 21) : BV:32
31 : prod(30, 23) : PROD[BV:32,BV:32]
32 : sum(29, 12, 31) : SUM[UNIT,PROD[BV:32,BV:32]]
33 : lambda(24, 32) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
34 : ind(2, 2, 22, 23, 27, 33) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
35 : prod(34, 4) : PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]
36 : sum(11, 12, 35) : SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]
37 : lambda(5, 36) : FUNCTION[BV:32 -> SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]]
50 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
38 : ind(2, 2, 50, 4, 8, 37) : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
39 : eq(1, 38) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 0
=Comment
matfreq_1arr_1ls
=LhsExpr
1 : input.spec-%var-vec-0.L4%16%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : input.dst.llvm-%m : BV:32
10 : bvuge(5, 9) : BOOL
11 : ite(10, 3, 6) : BV:32
12 : unit : UNIT
13 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
14 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
15 : memlabel-top : MEMLABEL
16 : input.dst.llvm-%mat : BV:32
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(5, 17) : BV:32
19 : bvadd(16, 18) : BV:32
20 : 4 { 0x4 +1.0e1025 } : INT
21 : 0 { 0x0 } : BOOL
22 : select(13, 14, 15, 19, 20, 21) : BV:32
23 : Indxform0 : BV:32
24 : Lambda0 : BV:32
25 : bvadd(24, 17) : BV:32
26 : select(13, 14, 15, 25, 20, 21) : BV:32
27 : lambda(24, 26) : FUNCTION[BV:32 -> BV:32]
28 : eq(3, 24) : BOOL
29 : ite(28, 3, 6) : BV:32
30 : select(13, 14, 15, 24, 20, 21) : BV:32
31 : prod(30, 23) : PROD[BV:32,BV:32]
32 : sum(29, 12, 31) : SUM[UNIT,PROD[BV:32,BV:32]]
33 : lambda(24, 32) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
60 : input.dst.llvm-%row.0.Lfor.cond1%1%bbentry : BV:32
34 : ind(2, 2, 60, 23, 27, 33) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
35 : prod(34, 4) : PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]
36 : sum(11, 12, 35) : SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]
37 : lambda(5, 36) : FUNCTION[BV:32 -> SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]]
50 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
38 : ind(2, 2, 50, 4, 8, 37) : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
70 : 0 : INT
71 : sum_get(38, 2) : IND[Type1,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],SUM[UNIT,DECL[Type1]]]]
72 : prod_get(71, 70) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
39 : eq(1, 72) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 0
=Comment
matfreq_1arr_4ls
=LhsExpr
1 : input.spec-%var-vec-0.L4%16%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : input.dst.llvm-%m : BV:32
10 : bvuge(5, 9) : BOOL
11 : ite(10, 3, 6) : BV:32
12 : unit : UNIT
13 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
14 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
15 : memlabel-top : MEMLABEL
16 : input.dst.llvm-%mat : BV:32
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(5, 17) : BV:32
19 : bvadd(16, 18) : BV:32
20 : 4 { 0x4 +1.0e1025 } : INT
21 : 0 { 0x0 } : BOOL
22 : select(13, 14, 15, 19, 20, 21) : BV:32
23 : Indxform0 : BV:32
24 : Lambda0 : BV:32
25 : bvadd(24, 17) : BV:32
26 : select(13, 14, 15, 25, 20, 21) : BV:32
27 : lambda(24, 26) : FUNCTION[BV:32 -> BV:32]
28 : eq(3, 24) : BOOL
29 : ite(28, 3, 6) : BV:32
30 : select(13, 14, 15, 24, 20, 21) : BV:32
31 : prod(30, 23) : PROD[BV:32,BV:32]
32 : sum(29, 12, 31) : SUM[UNIT,PROD[BV:32,BV:32]]
33 : lambda(24, 32) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
60 : input.dst.llvm-%row.0.Lwhile.cond%1%bbentry : BV:32
34 : ind(2, 2, 60, 23, 27, 33) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
35 : prod(34, 4) : PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]
36 : sum(11, 12, 35) : SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]
37 : lambda(5, 36) : FUNCTION[BV:32 -> SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]]
50 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
38 : ind(2, 2, 50, 4, 8, 37) : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
70 : 0 : INT
71 : sum_get(38, 2) : IND[Type1,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],SUM[UNIT,DECL[Type1]]]]
72 : prod_get(71, 70) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
39 : eq(1, 72) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 0
=Comment
matfreq_1arr_1ls-matfreq_1arr_4ls
=LhsExpr
1 : input.spec-%var-mat2-0.L4%16%bbentry : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : input.dst.llvm-%m : BV:32
10 : bvuge(5, 9) : BOOL
11 : ite(10, 3, 6) : BV:32
12 : unit : UNIT
13 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
14 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
15 : memlabel-top : MEMLABEL
16 : input.dst.llvm-%mat : BV:32
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(5, 17) : BV:32
19 : bvadd(16, 18) : BV:32
20 : 4 { 0x4 +1.0e1025 } : INT
21 : 0 { 0x0 } : BOOL
22 : select(13, 14, 15, 19, 20, 21) : BV:32
23 : Indxform0 : BV:32
24 : Lambda0 : BV:32
25 : bvadd(24, 17) : BV:32
26 : select(13, 14, 15, 25, 20, 21) : BV:32
27 : lambda(24, 26) : FUNCTION[BV:32 -> BV:32]
28 : eq(3, 24) : BOOL
29 : ite(28, 3, 6) : BV:32
30 : select(13, 14, 15, 24, 20, 21) : BV:32
31 : prod(30, 23) : PROD[BV:32,BV:32]
32 : sum(29, 12, 31) : SUM[UNIT,PROD[BV:32,BV:32]]
33 : lambda(24, 32) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
34 : ind(2, 2, 22, 23, 27, 33) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
35 : prod(34, 4) : PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]
36 : sum(11, 12, 35) : SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]
37 : lambda(5, 36) : FUNCTION[BV:32 -> SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]]
50 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
51 : apply(8, 50) : BV:32
38 : ind(2, 2, 51, 4, 8, 37) : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
39 : eq(1, 38) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 0
=Comment
matfreq_1arr_4cls
=LhsExpr
1 : input.spec-%var-mat-0.L4%5%bbentry : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : input.dst.llvm-%m : BV:32
10 : bvuge(5, 9) : BOOL
11 : ite(10, 3, 6) : BV:32
12 : unit : UNIT
13 : 2 { 0x2 +1.0e1025 } : INT
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : input.dst.llvm-%mat : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(5, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : 4 { 0x4 +1.0e1025 } : INT
22 : 0 { 0x0 } : BOOL
23 : select(14, 15, 16, 20, 21, 22) : BV:32
24 : Indxform0 : BV:32
25 : Lambda0 : BV:32
26 : Lambda2 : BV:32
27 : 3 { 0x3 +1.35e129 } : BV:32
28 : eq(26, 27) : BOOL
29 : 16 { 0x10 +1.190e129 } : BV:32
30 : bvadd(25, 29) : BV:32
31 : select(14, 15, 16, 30, 21, 22) : BV:32
32 : ite(28, 31, 25) : BV:32
33 : lambda(25, 26, 32) : FUNCTION[BV:32,BV:32 -> BV:32]
34 : bvadd(6, 26) : BV:32
35 : bvurem(34, 18) : BV:32
36 : lambda(25, 26, 35) : FUNCTION[BV:32,BV:32 -> BV:32]
37 : eq(3, 25) : BOOL
38 : ite(37, 3, 6) : BV:32
39 : bvmul(18, 26) : BV:32
40 : bvadd(25, 39) : BV:32
41 : select(14, 15, 16, 40, 21, 22) : BV:32
42 : prod(41, 24) : PROD[BV:32,BV:32]
43 : sum(38, 12, 42) : SUM[UNIT,PROD[BV:32,BV:32]]
44 : lambda(25, 26, 43) : FUNCTION[BV:32,BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
45 : ind(13, 2, 23, 3, 24, 33, 36, 44) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
46 : prod(45, 4) : PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]
47 : sum(11, 12, 46) : SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]
48 : lambda(5, 47) : FUNCTION[BV:32 -> SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]]
80 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
49 : ind(2, 2, 80, 4, 8, 48) : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
50 : eq(1, 49) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 0
=Comment
matfreq_1arr_4cls
=LhsExpr
1 : input.spec-%var-vec-0.L4%16%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : input.dst.llvm-%m : BV:32
10 : bvuge(5, 9) : BOOL
11 : ite(10, 3, 6) : BV:32
12 : unit : UNIT
13 : 2 { 0x2 +1.0e1025 } : INT
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : input.dst.llvm-%mat : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(5, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : 4 { 0x4 +1.0e1025 } : INT
22 : 0 { 0x0 } : BOOL
23 : select(14, 15, 16, 20, 21, 22) : BV:32
24 : Indxform0 : BV:32
25 : Lambda0 : BV:32
26 : Lambda2 : BV:32
27 : 3 { 0x3 +1.35e129 } : BV:32
28 : eq(26, 27) : BOOL
29 : 16 { 0x10 +1.190e129 } : BV:32
30 : bvadd(25, 29) : BV:32
31 : select(14, 15, 16, 30, 21, 22) : BV:32
32 : ite(28, 31, 25) : BV:32
33 : lambda(25, 26, 32) : FUNCTION[BV:32,BV:32 -> BV:32]
34 : bvadd(6, 26) : BV:32
35 : bvurem(34, 18) : BV:32
36 : lambda(25, 26, 35) : FUNCTION[BV:32,BV:32 -> BV:32]
37 : eq(3, 25) : BOOL
38 : ite(37, 3, 6) : BV:32
39 : bvmul(18, 26) : BV:32
40 : bvadd(25, 39) : BV:32
41 : select(14, 15, 16, 40, 21, 22) : BV:32
42 : prod(41, 24) : PROD[BV:32,BV:32]
43 : sum(38, 12, 42) : SUM[UNIT,PROD[BV:32,BV:32]]
44 : lambda(25, 26, 43) : FUNCTION[BV:32,BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
99 : input.dst.llvm-%row.0.Lfor.cond1%1%bbentry : BV:32
45 : ind(13, 2, 99, 3, 24, 33, 36, 44) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
46 : prod(45, 4) : PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]
47 : sum(11, 12, 46) : SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]
48 : lambda(5, 47) : FUNCTION[BV:32 -> SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]]
80 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
49 : ind(2, 2, 80, 4, 8, 48) : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
90 : 0 : INT
91 : sum_get(49, 2) : IND[Type1,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],SUM[UNIT,DECL[Type1]]]]
92 : prod_get(91, 90) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
50 : eq(1, 92) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 0
=Comment
matfreq_1arr_4cls
=LhsExpr
1 : input.spec-%var-mat2-0.L4%16%bbentry : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1 : BV:32
5 : Lambda1 : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvadd(6, 5) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : input.dst.llvm-%m : BV:32
10 : bvuge(5, 9) : BOOL
11 : ite(10, 3, 6) : BV:32
12 : unit : UNIT
13 : 2 { 0x2 +1.0e1025 } : INT
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : input.dst.llvm-%mat : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(5, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : 4 { 0x4 +1.0e1025 } : INT
22 : 0 { 0x0 } : BOOL
23 : select(14, 15, 16, 20, 21, 22) : BV:32
24 : Indxform0 : BV:32
25 : Lambda0 : BV:32
26 : Lambda2 : BV:32
27 : 3 { 0x3 +1.35e129 } : BV:32
28 : eq(26, 27) : BOOL
29 : 16 { 0x10 +1.190e129 } : BV:32
30 : bvadd(25, 29) : BV:32
31 : select(14, 15, 16, 30, 21, 22) : BV:32
32 : ite(28, 31, 25) : BV:32
33 : lambda(25, 26, 32) : FUNCTION[BV:32,BV:32 -> BV:32]
34 : bvadd(6, 26) : BV:32
35 : bvurem(34, 18) : BV:32
36 : lambda(25, 26, 35) : FUNCTION[BV:32,BV:32 -> BV:32]
37 : eq(3, 25) : BOOL
38 : ite(37, 3, 6) : BV:32
39 : bvmul(18, 26) : BV:32
40 : bvadd(25, 39) : BV:32
41 : select(14, 15, 16, 40, 21, 22) : BV:32
42 : prod(41, 24) : PROD[BV:32,BV:32]
43 : sum(38, 12, 42) : SUM[UNIT,PROD[BV:32,BV:32]]
44 : lambda(25, 26, 43) : FUNCTION[BV:32,BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
45 : ind(13, 2, 23, 3, 24, 33, 36, 44) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
46 : prod(45, 4) : PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]
47 : sum(11, 12, 46) : SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]
48 : lambda(5, 47) : FUNCTION[BV:32 -> SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],BV:32]]]
80 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
81 : apply(8, 80) : BV:32
49 : ind(2, 2, 81, 4, 8, 48) : IND[Type1,SUM[UNIT,PROD[IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]],DECL[Type1]]]]
50 : eq(1, 49) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 8
=Comment
sum_list_1arr-sum_list_4arr
=LhsExpr
140273 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
140280 : 1 { 0x1 +1.0e1025 } : INT
140277 : 0 { 0x0 +1.0e129 } : BV:32
140628 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140381 : Indxform0 : BV:32
140373 : Lambda0 : BV:32
140309 : 1 { 0x1 +1.11e129 } : BV:32
140952 : bvadd(140309, 140373) : BV:32
140953 : lambda(140373, 140952) : FUNCTION[BV:32 -> BV:32]
140417 : input.dst.llvm-%n : BV:32
140918 : bvuge(140373, 140417) : BOOL
140919 : ite(140918, 140277, 140309) : BV:32
140377 : unit : UNIT
140418 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140419 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140370 : memlabel-top : MEMLABEL
140415 : input.dst.llvm-%arr : BV:32
140374 : 4 { 0x4 +1.47e129 } : BV:32
140957 : bvmul(140373, 140374) : BV:32
141002 : bvadd(140415, 140957) : BV:32
140371 : 4 { 0x4 +1.0e1025 } : INT
140372 : 0 { 0x0 } : BOOL
141003 : select(140418, 140419, 140370, 141002, 140371, 140372) : BV:32
141005 : prod(141003, 140381) : PROD[BV:32,BV:32]
141007 : sum(140919, 140377, 141005) : SUM[UNIT,PROD[BV:32,BV:32]]
141009 : lambda(140373, 141007) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
141016 : ind(140280, 140280, 140628, 140381, 140953, 141009) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
141019 : eq(140273, 141016) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
